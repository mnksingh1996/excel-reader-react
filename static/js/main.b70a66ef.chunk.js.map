{"version":3,"sources":["utility/types.js","components/popup.js","utility/MakeColumns.js","App.js","serviceWorker.js","index.js"],"names":["map","x","join","popup","props","className","onSubmit","rows","type","onClick","closePopup","make_cols","refstr","o","C","XLSX","utils","decode_range","e","c","i","name","encode_col","key","App","state","file","data","cols","headers","show_popup","current_earning_id","handleChange","files","target","setState","handleFile","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","bookVBA","wsname","SheetNames","ws","Sheets","sheet_to_json","el","approved","selected","Object","keys","console","log","readAsArrayBuffer","approveSelected","onConfirmReject","preventDefault","earning_id","this","htmlFor","id","accept","SheetJSFT","onChange","length","header","split","row","index","checked","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b70a66ef.chunk.js","sourcesContent":["const SheetJSFT = [\"xlsx\", \"xls\", \"csv\"].map((x) => \".\" + x).join(\",\");\n","import React from \"react\";\n\nfunction popup(props) {\n  return (\n    <form className=\"popup\" onSubmit={props.onSubmit}>\n      <div>\n        <h1>Please state the reason for rejection</h1>\n\n        <textarea rows=\"3\"></textarea>\n\n        <div className=\"cta\">\n          <button className=\"btn danger\" type=\"submit\">\n            Confirm Reject\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn cancel\"\n            onClick={props.closePopup}\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default popup;\n","import XLSX from \"xlsx\";\n/* generate an array of column objects */\nexport const make_cols = (refstr) => {\n  let o = [],\n    C = XLSX.utils.decode_range(refstr).e.c + 1;\n  for (var i = 0; i < C; ++i) o[i] = { name: XLSX.utils.encode_col(i), key: i };\n  return o;\n};\n","import React, { Component } from \"react\";\n\nimport XLSX from \"xlsx\";\n\nimport Popup from \"./components/popup\";\n\nimport { make_cols } from \"./utility/MakeColumns\";\nimport { SheetJSFT } from \"./utility/types\";\n\nimport \"./App.scss\";\n\nclass App extends Component {\n  state = {\n    file: {},\n    data: [],\n    cols: [],\n    headers: [],\n    show_popup: false,\n    current_earning_id: null,\n  };\n\n  handleChange = (e) => {\n    const files = e.target.files;\n    if (files && files[0])\n      this.setState({ file: files[0] }, () => this.handleFile());\n  };\n\n  handleFile = () => {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = (e) => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? \"binary\" : \"array\",\n        bookVBA: true,\n      });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws);\n      /* Update state */\n      this.setState(\n        {\n          data: data.map((el) => ({ ...el, approved: null, selected: false })),\n          headers: Object.keys(data[0]), // get column headings from excel row\n          cols: make_cols(ws[\"!ref\"]),\n        },\n        () => console.log(this.state.data)\n      );\n    };\n\n    if (rABS) {\n      reader.readAsBinaryString(this.state.file);\n    } else {\n      reader.readAsArrayBuffer(this.state.file);\n    }\n  };\n\n  approveSelected = () => {\n    const data = this.state.data.map((el) => ({\n      ...el,\n      approved: el.selected ? true : el.approved,\n      selected: false,\n    }));\n\n    this.setState({ data }, () => console.log(this.state.data));\n  };\n\n  onConfirmReject = (e) => {\n    e.preventDefault();\n\n    const data = this.state.data.map((el) =>\n      el.earning_id === this.state.current_earning_id\n        ? { ...el, approved: false }\n        : el\n    );\n\n    this.setState({ data, show_popup: false });\n  };\n\n  render() {\n    const { headers, data, show_popup, current_earning_id } = this.state;\n\n    return (\n      <>\n        <header>\n          <label htmlFor=\"file\">Upload excel to load profiles</label>\n          <input\n            type=\"file\"\n            className=\"file\"\n            id=\"file\"\n            accept={SheetJSFT}\n            onChange={this.handleChange}\n          />\n        </header>\n        {show_popup ? (\n          <Popup\n            closePopup={() => this.setState({ show_popup: false })}\n            current_earning_id={current_earning_id}\n            onSubmit={this.onConfirmReject}\n          />\n        ) : null}\n        <main>\n          {data.length ? (\n            <table>\n              <thead>\n                <tr>\n                  <th>\n                    <button\n                      onClick={this.approveSelected}\n                      className=\"btn primary\"\n                    >\n                      Approve selected\n                    </button>\n                  </th>\n                  {headers.map((header) => (\n                    <th key={header}>{header.split(\"_\").join(\" \")}</th>\n                  ))}\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.map((row, index) => (\n                  <tr key={index}>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        checked={row.selected}\n                        onChange={() =>\n                          this.setState({\n                            data: data.map((el) =>\n                              el.earning_id === row.earning_id\n                                ? { ...el, selected: !el.selected }\n                                : el\n                            ),\n                          })\n                        }\n                      />\n                    </td>\n                    {headers.map((header) => (\n                      <td key={header}>{row[header]}</td>\n                    ))}\n\n                    {row.approved === null ? (\n                      <td>\n                        <button\n                          className=\"btn primary\"\n                          onClick={() =>\n                            this.setState({\n                              data: data.map((el) =>\n                                el.earning_id === row.earning_id\n                                  ? { ...el, approved: true }\n                                  : el\n                              ),\n                            })\n                          }\n                        >\n                          Approve\n                        </button>\n                        <span>|</span>\n                        <button\n                          onClick={() =>\n                            this.setState({\n                              show_popup: true,\n                              current_earning_id: row.earning_id,\n                            })\n                          }\n                          className=\"btn danger\"\n                        >\n                          Reject\n                        </button>\n                      </td>\n                    ) : (\n                      <td>\n                        {row.approved ? (\n                          <button className=\"btn primary inverted\">\n                            Approved\n                          </button>\n                        ) : (\n                          <button className=\"btn primary inverted\">\n                            Rejected\n                          </button>\n                        )}\n                      </td>\n                    )}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          ) : null}\n        </main>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}